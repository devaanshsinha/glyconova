// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  clerkId         String           @unique
  email           String?
  name            String?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  glucoseReadings GlucoseReading[]
  dataUploads     DataUpload[]
  glucoseStats    GlucoseStats? // One-to-one relation to stats
}

model GlucoseReading {
  id              String   @id @default(cuid())
  timestamp       DateTime
  glucoseValue    Float
  rateOfChange    Float?
  eventType       String
  eventSubtype    String?
  transmitterId   String?
  transmitterTime String?
  sourceDeviceId  String?
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([timestamp])
}

model DataUpload {
  id         String   @id @default(cuid())
  fileName   String
  fileSize   Int
  uploadedAt DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// New model to store pre-calculated statistics
model GlucoseStats {
  id                String   @id @default(cuid())
  userId            String   @unique // One-to-one relation with User
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  average           Float
  standardDeviation Float
  highCount         Int
  lowCount          Int
  inRangeCount      Int
  totalReadings     Int
  highPercentage    Float
  lowPercentage     Float
  inRangePercentage Float
  minGlucose        Float
  maxGlucose        Float
  timeInRange       String
  lastCalculated    DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
